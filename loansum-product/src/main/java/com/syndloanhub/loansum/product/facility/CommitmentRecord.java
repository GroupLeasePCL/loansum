/**
 * Copyright (c) 2018 SyndLoanHub, LLC and contributors
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License from within this distribution and at:
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 */

package com.syndloanhub.loansum.product.facility;

import org.joda.beans.ImmutableBean;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.ImmutableValidator;
import org.joda.beans.gen.PropertyDefinition;

import static com.syndloanhub.loansum.product.facility.FacilityType.Term;

import java.time.LocalDate;
import java.util.Map;
import java.util.NoSuchElementException;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import org.joda.beans.Bean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.impl.direct.DirectMetaProperty;

import com.opengamma.strata.collect.ArgChecker;

/**
 * Breakdown of total commitment at any point in time.
 */
@BeanDefinition
public final class CommitmentRecord implements ImmutableBean {

  /**
   * Date on which, at EOD, the commitment breakdown holds.
   */
  @PropertyDefinition(validate = "notNull")
  private final LocalDate effectiveDate;

  /**
   * Funded amount or the amount borrowed and accruing interest within a contract.
   */
  @PropertyDefinition(validate = "ArgChecker.notNegative")
  private final double funded;

  /**
   * Unfunded amount or the amount available to borrow.
   */
  @PropertyDefinition(validate = "ArgChecker.notNegative")
  private final double unfunded;

  /**
   * Undrawn letter-of-credit amount.
   */
  @PropertyDefinition(validate = "ArgChecker.notNegative")
  private final double undrawnlc;

  /**
   * Total commitment: funded + unfunded + undrawnlc.
   */
  @PropertyDefinition(validate = "ArgChecker.notNegative")
  private final double total;

  /**
   * Facility-level validation rules.
   */
  @ImmutableValidator
  private void validate() {
    ArgChecker.isFalse(Math.abs(funded + unfunded + undrawnlc - total) > 0.01,
        "total commitment must be sum of funded, unfunded, and undrawn LC");
  }

  //------------------------- AUTOGENERATED START -------------------------
  /**
   * The meta-bean for {@code CommitmentRecord}.
   * @return the meta-bean, not null
   */
  public static CommitmentRecord.Meta meta() {
    return CommitmentRecord.Meta.INSTANCE;
  }

  static {
    MetaBean.register(CommitmentRecord.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static CommitmentRecord.Builder builder() {
    return new CommitmentRecord.Builder();
  }

  private CommitmentRecord(
      LocalDate effectiveDate,
      double funded,
      double unfunded,
      double undrawnlc,
      double total) {
    JodaBeanUtils.notNull(effectiveDate, "effectiveDate");
    ArgChecker.notNegative(funded, "funded");
    ArgChecker.notNegative(unfunded, "unfunded");
    ArgChecker.notNegative(undrawnlc, "undrawnlc");
    ArgChecker.notNegative(total, "total");
    this.effectiveDate = effectiveDate;
    this.funded = funded;
    this.unfunded = unfunded;
    this.undrawnlc = undrawnlc;
    this.total = total;
    validate();
  }

  @Override
  public CommitmentRecord.Meta metaBean() {
    return CommitmentRecord.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets date on which, at EOD, the commitment breakdown holds.
   * @return the value of the property, not null
   */
  public LocalDate getEffectiveDate() {
    return effectiveDate;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets funded amount or the amount borrowed and accruing interest within a contract.
   * @return the value of the property
   */
  public double getFunded() {
    return funded;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets unfunded amount or the amount available to borrow.
   * @return the value of the property
   */
  public double getUnfunded() {
    return unfunded;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets undrawn letter-of-credit amount.
   * @return the value of the property
   */
  public double getUndrawnlc() {
    return undrawnlc;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets total commitment: funded + unfunded + undrawnlc.
   * @return the value of the property
   */
  public double getTotal() {
    return total;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      CommitmentRecord other = (CommitmentRecord) obj;
      return JodaBeanUtils.equal(effectiveDate, other.effectiveDate) &&
          JodaBeanUtils.equal(funded, other.funded) &&
          JodaBeanUtils.equal(unfunded, other.unfunded) &&
          JodaBeanUtils.equal(undrawnlc, other.undrawnlc) &&
          JodaBeanUtils.equal(total, other.total);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(effectiveDate);
    hash = hash * 31 + JodaBeanUtils.hashCode(funded);
    hash = hash * 31 + JodaBeanUtils.hashCode(unfunded);
    hash = hash * 31 + JodaBeanUtils.hashCode(undrawnlc);
    hash = hash * 31 + JodaBeanUtils.hashCode(total);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(192);
    buf.append("CommitmentRecord{");
    buf.append("effectiveDate").append('=').append(effectiveDate).append(',').append(' ');
    buf.append("funded").append('=').append(funded).append(',').append(' ');
    buf.append("unfunded").append('=').append(unfunded).append(',').append(' ');
    buf.append("undrawnlc").append('=').append(undrawnlc).append(',').append(' ');
    buf.append("total").append('=').append(JodaBeanUtils.toString(total));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code CommitmentRecord}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code effectiveDate} property.
     */
    private final MetaProperty<LocalDate> _effectiveDate = DirectMetaProperty.ofImmutable(
        this, "effectiveDate", CommitmentRecord.class, LocalDate.class);
    /**
     * The meta-property for the {@code funded} property.
     */
    private final MetaProperty<Double> _funded = DirectMetaProperty.ofImmutable(
        this, "funded", CommitmentRecord.class, Double.TYPE);
    /**
     * The meta-property for the {@code unfunded} property.
     */
    private final MetaProperty<Double> _unfunded = DirectMetaProperty.ofImmutable(
        this, "unfunded", CommitmentRecord.class, Double.TYPE);
    /**
     * The meta-property for the {@code undrawnlc} property.
     */
    private final MetaProperty<Double> _undrawnlc = DirectMetaProperty.ofImmutable(
        this, "undrawnlc", CommitmentRecord.class, Double.TYPE);
    /**
     * The meta-property for the {@code total} property.
     */
    private final MetaProperty<Double> _total = DirectMetaProperty.ofImmutable(
        this, "total", CommitmentRecord.class, Double.TYPE);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "effectiveDate",
        "funded",
        "unfunded",
        "undrawnlc",
        "total");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -930389515:  // effectiveDate
          return _effectiveDate;
        case -1263365596:  // funded
          return _funded;
        case -376862211:  // unfunded
          return _unfunded;
        case -670152216:  // undrawnlc
          return _undrawnlc;
        case 110549828:  // total
          return _total;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public CommitmentRecord.Builder builder() {
      return new CommitmentRecord.Builder();
    }

    @Override
    public Class<? extends CommitmentRecord> beanType() {
      return CommitmentRecord.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code effectiveDate} property.
     * @return the meta-property, not null
     */
    public MetaProperty<LocalDate> effectiveDate() {
      return _effectiveDate;
    }

    /**
     * The meta-property for the {@code funded} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Double> funded() {
      return _funded;
    }

    /**
     * The meta-property for the {@code unfunded} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Double> unfunded() {
      return _unfunded;
    }

    /**
     * The meta-property for the {@code undrawnlc} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Double> undrawnlc() {
      return _undrawnlc;
    }

    /**
     * The meta-property for the {@code total} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Double> total() {
      return _total;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -930389515:  // effectiveDate
          return ((CommitmentRecord) bean).getEffectiveDate();
        case -1263365596:  // funded
          return ((CommitmentRecord) bean).getFunded();
        case -376862211:  // unfunded
          return ((CommitmentRecord) bean).getUnfunded();
        case -670152216:  // undrawnlc
          return ((CommitmentRecord) bean).getUndrawnlc();
        case 110549828:  // total
          return ((CommitmentRecord) bean).getTotal();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code CommitmentRecord}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<CommitmentRecord> {

    private LocalDate effectiveDate;
    private double funded;
    private double unfunded;
    private double undrawnlc;
    private double total;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(CommitmentRecord beanToCopy) {
      this.effectiveDate = beanToCopy.getEffectiveDate();
      this.funded = beanToCopy.getFunded();
      this.unfunded = beanToCopy.getUnfunded();
      this.undrawnlc = beanToCopy.getUndrawnlc();
      this.total = beanToCopy.getTotal();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -930389515:  // effectiveDate
          return effectiveDate;
        case -1263365596:  // funded
          return funded;
        case -376862211:  // unfunded
          return unfunded;
        case -670152216:  // undrawnlc
          return undrawnlc;
        case 110549828:  // total
          return total;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -930389515:  // effectiveDate
          this.effectiveDate = (LocalDate) newValue;
          break;
        case -1263365596:  // funded
          this.funded = (Double) newValue;
          break;
        case -376862211:  // unfunded
          this.unfunded = (Double) newValue;
          break;
        case -670152216:  // undrawnlc
          this.undrawnlc = (Double) newValue;
          break;
        case 110549828:  // total
          this.total = (Double) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public CommitmentRecord build() {
      return new CommitmentRecord(
          effectiveDate,
          funded,
          unfunded,
          undrawnlc,
          total);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets date on which, at EOD, the commitment breakdown holds.
     * @param effectiveDate  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder effectiveDate(LocalDate effectiveDate) {
      JodaBeanUtils.notNull(effectiveDate, "effectiveDate");
      this.effectiveDate = effectiveDate;
      return this;
    }

    /**
     * Sets funded amount or the amount borrowed and accruing interest within a contract.
     * @param funded  the new value
     * @return this, for chaining, not null
     */
    public Builder funded(double funded) {
      ArgChecker.notNegative(funded, "funded");
      this.funded = funded;
      return this;
    }

    /**
     * Sets unfunded amount or the amount available to borrow.
     * @param unfunded  the new value
     * @return this, for chaining, not null
     */
    public Builder unfunded(double unfunded) {
      ArgChecker.notNegative(unfunded, "unfunded");
      this.unfunded = unfunded;
      return this;
    }

    /**
     * Sets undrawn letter-of-credit amount.
     * @param undrawnlc  the new value
     * @return this, for chaining, not null
     */
    public Builder undrawnlc(double undrawnlc) {
      ArgChecker.notNegative(undrawnlc, "undrawnlc");
      this.undrawnlc = undrawnlc;
      return this;
    }

    /**
     * Sets total commitment: funded + unfunded + undrawnlc.
     * @param total  the new value
     * @return this, for chaining, not null
     */
    public Builder total(double total) {
      ArgChecker.notNegative(total, "total");
      this.total = total;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(192);
      buf.append("CommitmentRecord.Builder{");
      buf.append("effectiveDate").append('=').append(JodaBeanUtils.toString(effectiveDate)).append(',').append(' ');
      buf.append("funded").append('=').append(JodaBeanUtils.toString(funded)).append(',').append(' ');
      buf.append("unfunded").append('=').append(JodaBeanUtils.toString(unfunded)).append(',').append(' ');
      buf.append("undrawnlc").append('=').append(JodaBeanUtils.toString(undrawnlc)).append(',').append(' ');
      buf.append("total").append('=').append(JodaBeanUtils.toString(total));
      buf.append('}');
      return buf.toString();
    }

  }

  //-------------------------- AUTOGENERATED END --------------------------
}
