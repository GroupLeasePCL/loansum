/**
 * Copyright (c) 2018 SyndLoanHub, LLC and contributors
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License from within this distribution and at:
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 */

package com.syndloanhub.loansum.product.facility;

import org.joda.beans.ImmutableBean;
import org.joda.beans.Bean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import org.joda.beans.MetaBean;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;

import com.google.common.collect.ImmutableList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;

/**
 * A collection of commitment records.
 */
@BeanDefinition
public final class Commitment implements ImmutableBean {

  /**
   * List of annotated cash flows.
   */
  @PropertyDefinition(validate = "notEmpty", builderType = "List<? extends CommitmentRecord>")
  private final ImmutableList<CommitmentRecord> commitment;

  //------------------------- AUTOGENERATED START -------------------------
  /**
   * The meta-bean for {@code Commitment}.
   * @return the meta-bean, not null
   */
  public static Commitment.Meta meta() {
    return Commitment.Meta.INSTANCE;
  }

  static {
    MetaBean.register(Commitment.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static Commitment.Builder builder() {
    return new Commitment.Builder();
  }

  private Commitment(
      List<? extends CommitmentRecord> commitment) {
    JodaBeanUtils.notEmpty(commitment, "commitment");
    this.commitment = ImmutableList.copyOf(commitment);
  }

  @Override
  public Commitment.Meta metaBean() {
    return Commitment.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets list of annotated cash flows.
   * @return the value of the property, not empty
   */
  public ImmutableList<CommitmentRecord> getCommitment() {
    return commitment;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      Commitment other = (Commitment) obj;
      return JodaBeanUtils.equal(commitment, other.commitment);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(commitment);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(64);
    buf.append("Commitment{");
    buf.append("commitment").append('=').append(JodaBeanUtils.toString(commitment));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code Commitment}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code commitment} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<ImmutableList<CommitmentRecord>> _commitment = DirectMetaProperty.ofImmutable(
        this, "commitment", Commitment.class, (Class) ImmutableList.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "commitment");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1019005717:  // commitment
          return _commitment;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public Commitment.Builder builder() {
      return new Commitment.Builder();
    }

    @Override
    public Class<? extends Commitment> beanType() {
      return Commitment.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code commitment} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ImmutableList<CommitmentRecord>> commitment() {
      return _commitment;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 1019005717:  // commitment
          return ((Commitment) bean).getCommitment();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code Commitment}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<Commitment> {

    private List<? extends CommitmentRecord> commitment = ImmutableList.of();

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(Commitment beanToCopy) {
      this.commitment = beanToCopy.getCommitment();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1019005717:  // commitment
          return commitment;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 1019005717:  // commitment
          this.commitment = (List<? extends CommitmentRecord>) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Commitment build() {
      return new Commitment(
          commitment);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets list of annotated cash flows.
     * @param commitment  the new value, not empty
     * @return this, for chaining, not null
     */
    public Builder commitment(List<? extends CommitmentRecord> commitment) {
      JodaBeanUtils.notEmpty(commitment, "commitment");
      this.commitment = commitment;
      return this;
    }

    /**
     * Sets the {@code commitment} property in the builder
     * from an array of objects.
     * @param commitment  the new value, not empty
     * @return this, for chaining, not null
     */
    public Builder commitment(CommitmentRecord... commitment) {
      return commitment(ImmutableList.copyOf(commitment));
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(64);
      buf.append("Commitment.Builder{");
      buf.append("commitment").append('=').append(JodaBeanUtils.toString(commitment));
      buf.append('}');
      return buf.toString();
    }

  }

  //-------------------------- AUTOGENERATED END --------------------------
}
