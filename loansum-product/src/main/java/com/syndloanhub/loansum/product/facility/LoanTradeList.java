/**
 * Copyright (c) 2018 SyndLoanHub, LLC and contributors
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License from within this distribution and at:
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 */

package com.syndloanhub.loansum.product.facility;

import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.stream.Collectors;

import org.joda.beans.Bean;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.google.common.collect.ImmutableList;
import com.opengamma.strata.product.ProductTrade;
import com.syndloanhub.loansum.product.facility.prorated.ProratedLoanTrade;
import com.syndloanhub.loansum.product.facility.prorated.ProratedLoanTradeList;

/**
 * Collection of loan trades.
 */
@BeanDefinition
public final class LoanTradeList implements Proratable<ProratedLoanTradeList>, ImmutableBean {

  /**
   * Collection of trades.
   */
  @PropertyDefinition(validate = "notNull")
  private final ImmutableList<LoanTrade> trades;

  /**
   * Prorate a collection of non-prorated trades.
   */
  @Override
  public ProratedLoanTradeList prorate(ProductTrade unused) {
    return ProratedLoanTradeList.builder()
        .trades(trades
            .stream()
            .map(trade -> trade.prorate(null))
            .collect(Collectors.toList()))
        .build();
  }

  //------------------------- AUTOGENERATED START -------------------------
  /**
   * The meta-bean for {@code LoanTradeList}.
   * @return the meta-bean, not null
   */
  public static LoanTradeList.Meta meta() {
    return LoanTradeList.Meta.INSTANCE;
  }

  static {
    MetaBean.register(LoanTradeList.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static LoanTradeList.Builder builder() {
    return new LoanTradeList.Builder();
  }

  private LoanTradeList(
      List<LoanTrade> trades) {
    JodaBeanUtils.notNull(trades, "trades");
    this.trades = ImmutableList.copyOf(trades);
  }

  @Override
  public LoanTradeList.Meta metaBean() {
    return LoanTradeList.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets collection of trades.
   * @return the value of the property, not null
   */
  public ImmutableList<LoanTrade> getTrades() {
    return trades;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      LoanTradeList other = (LoanTradeList) obj;
      return JodaBeanUtils.equal(trades, other.trades);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(trades);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(64);
    buf.append("LoanTradeList{");
    buf.append("trades").append('=').append(JodaBeanUtils.toString(trades));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code LoanTradeList}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code trades} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<ImmutableList<LoanTrade>> _trades = DirectMetaProperty.ofImmutable(
        this, "trades", LoanTradeList.class, (Class) ImmutableList.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "trades");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -865715313:  // trades
          return _trades;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public LoanTradeList.Builder builder() {
      return new LoanTradeList.Builder();
    }

    @Override
    public Class<? extends LoanTradeList> beanType() {
      return LoanTradeList.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code trades} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ImmutableList<LoanTrade>> trades() {
      return _trades;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -865715313:  // trades
          return ((LoanTradeList) bean).getTrades();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code LoanTradeList}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<LoanTradeList> {

    private List<LoanTrade> trades = ImmutableList.of();

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(LoanTradeList beanToCopy) {
      this.trades = beanToCopy.getTrades();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -865715313:  // trades
          return trades;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -865715313:  // trades
          this.trades = (List<LoanTrade>) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public LoanTradeList build() {
      return new LoanTradeList(
          trades);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets collection of trades.
     * @param trades  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder trades(List<LoanTrade> trades) {
      JodaBeanUtils.notNull(trades, "trades");
      this.trades = trades;
      return this;
    }

    /**
     * Sets the {@code trades} property in the builder
     * from an array of objects.
     * @param trades  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder trades(LoanTrade... trades) {
      return trades(ImmutableList.copyOf(trades));
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(64);
      buf.append("LoanTradeList.Builder{");
      buf.append("trades").append('=').append(JodaBeanUtils.toString(trades));
      buf.append('}');
      return buf.toString();
    }

  }

  //-------------------------- AUTOGENERATED END --------------------------
}
