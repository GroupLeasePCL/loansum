/**
 * Copyright (c) 2018 SyndLoanHub, LLC and contributors
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License from within this distribution and at:
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 */

package com.syndloanhub.loansum.product.facility;

import java.time.LocalDate;

import org.joda.beans.ImmutableBean;

import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.stream.Collectors;

import org.joda.beans.Bean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.strata.basics.StandardId;
import com.opengamma.strata.collect.ArgChecker;
import com.opengamma.strata.product.ProductTrade;
import com.syndloanhub.loansum.product.facility.prorated.ProratedAccruingFee;

import org.joda.beans.MetaBean;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.ImmutableDefaults;
import org.joda.beans.gen.ImmutableValidator;
import org.joda.beans.gen.PropertyDefinition;

/**
 * An accruing fee, e.g. commitment fee charged on unfunded.
 */
@BeanDefinition
public final class AccruingFee implements ImmutableBean, Proratable<ProratedAccruingFee> {

  /**
   * Return a prorated version of this fee given a loan trade.
   * 
   * @param trade specific loan buy/sell
   * @return prorated fee which produces correct prorated economics for
   * the given loan trade.
   */
  @Override
  public ProratedAccruingFee prorate(ProductTrade trade) {

    // In lieu of having a method reference provided to generate an accrual schedule, for now
    // simply use the type string to determine which method, if any, to use.

    AccruingFeeAccrualScheduleGenerator method = Helper::generateDefaultFeeAccrualSchedule;

    if (type == "commitment fee")
      method = Helper::generateCommitmentFeeAccrualSchedule;

    return ProratedAccruingFee.builder()
        .id(id)
        .type(type)
        .accrual(accrual.prorate(trade))
        .accrualSchedule(method.generateAccrualSchedule((Facility) trade.getProduct(), this)
            .stream()
            .map(fee -> fee.prorate(trade))
            .collect(Collectors.toList()))
        .paymentDate(paymentDate)
        .build();
  }

  /**
   * The internal id of this fee
   */
  @PropertyDefinition(validate = "notNull")
  private final StandardId id;

  /**
   * The fee type, for now just a free form string.
   */
  @PropertyDefinition(validate = "notNull")
  private final String type;

  /**
   * The global fee accrual representation.
   */
  @PropertyDefinition(validate = "notNull")
  private final Accrual accrual;

  /**
   * The payment date of the fee.
   * <p>
   * Interest pays on this date. Usually identical to end date 
   * unless end date is a holiday. Payment date is given, not calculated.
   */
  @PropertyDefinition(validate = "notNull")
  private final LocalDate paymentDate;

  /**
   * Validation.
   */
  @ImmutableValidator
  private void validate() {
    ArgChecker.inOrderOrEqual(accrual.getEndDate(), paymentDate, "endDate", "paymentDate");
  }

  /**
   * Default common values: random fee id, type is commitment fee.
   * 
   * @param builder
   */
  @ImmutableDefaults
  private static void applyDefaults(Builder builder) {
    builder
        .id(StandardId.of("fee", Integer.toString(new Random().nextInt(100000))))
        .type("commitment fee");
  }

  //------------------------- AUTOGENERATED START -------------------------
  /**
   * The meta-bean for {@code AccruingFee}.
   * @return the meta-bean, not null
   */
  public static AccruingFee.Meta meta() {
    return AccruingFee.Meta.INSTANCE;
  }

  static {
    MetaBean.register(AccruingFee.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static AccruingFee.Builder builder() {
    return new AccruingFee.Builder();
  }

  private AccruingFee(
      StandardId id,
      String type,
      Accrual accrual,
      LocalDate paymentDate) {
    JodaBeanUtils.notNull(id, "id");
    JodaBeanUtils.notNull(type, "type");
    JodaBeanUtils.notNull(accrual, "accrual");
    JodaBeanUtils.notNull(paymentDate, "paymentDate");
    this.id = id;
    this.type = type;
    this.accrual = accrual;
    this.paymentDate = paymentDate;
    validate();
  }

  @Override
  public AccruingFee.Meta metaBean() {
    return AccruingFee.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the internal id of this fee
   * @return the value of the property, not null
   */
  public StandardId getId() {
    return id;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the fee type, for now just a free form string.
   * @return the value of the property, not null
   */
  public String getType() {
    return type;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the global fee accrual representation.
   * @return the value of the property, not null
   */
  public Accrual getAccrual() {
    return accrual;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the payment date of the fee.
   * <p>
   * Interest pays on this date. Usually identical to end date
   * unless end date is a holiday. Payment date is given, not calculated.
   * @return the value of the property, not null
   */
  public LocalDate getPaymentDate() {
    return paymentDate;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      AccruingFee other = (AccruingFee) obj;
      return JodaBeanUtils.equal(id, other.id) &&
          JodaBeanUtils.equal(type, other.type) &&
          JodaBeanUtils.equal(accrual, other.accrual) &&
          JodaBeanUtils.equal(paymentDate, other.paymentDate);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(id);
    hash = hash * 31 + JodaBeanUtils.hashCode(type);
    hash = hash * 31 + JodaBeanUtils.hashCode(accrual);
    hash = hash * 31 + JodaBeanUtils.hashCode(paymentDate);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(160);
    buf.append("AccruingFee{");
    buf.append("id").append('=').append(id).append(',').append(' ');
    buf.append("type").append('=').append(type).append(',').append(' ');
    buf.append("accrual").append('=').append(accrual).append(',').append(' ');
    buf.append("paymentDate").append('=').append(JodaBeanUtils.toString(paymentDate));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code AccruingFee}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code id} property.
     */
    private final MetaProperty<StandardId> _id = DirectMetaProperty.ofImmutable(
        this, "id", AccruingFee.class, StandardId.class);
    /**
     * The meta-property for the {@code type} property.
     */
    private final MetaProperty<String> _type = DirectMetaProperty.ofImmutable(
        this, "type", AccruingFee.class, String.class);
    /**
     * The meta-property for the {@code accrual} property.
     */
    private final MetaProperty<Accrual> _accrual = DirectMetaProperty.ofImmutable(
        this, "accrual", AccruingFee.class, Accrual.class);
    /**
     * The meta-property for the {@code paymentDate} property.
     */
    private final MetaProperty<LocalDate> _paymentDate = DirectMetaProperty.ofImmutable(
        this, "paymentDate", AccruingFee.class, LocalDate.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "id",
        "type",
        "accrual",
        "paymentDate");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 3355:  // id
          return _id;
        case 3575610:  // type
          return _type;
        case -1177229905:  // accrual
          return _accrual;
        case -1540873516:  // paymentDate
          return _paymentDate;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public AccruingFee.Builder builder() {
      return new AccruingFee.Builder();
    }

    @Override
    public Class<? extends AccruingFee> beanType() {
      return AccruingFee.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code id} property.
     * @return the meta-property, not null
     */
    public MetaProperty<StandardId> id() {
      return _id;
    }

    /**
     * The meta-property for the {@code type} property.
     * @return the meta-property, not null
     */
    public MetaProperty<String> type() {
      return _type;
    }

    /**
     * The meta-property for the {@code accrual} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Accrual> accrual() {
      return _accrual;
    }

    /**
     * The meta-property for the {@code paymentDate} property.
     * @return the meta-property, not null
     */
    public MetaProperty<LocalDate> paymentDate() {
      return _paymentDate;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 3355:  // id
          return ((AccruingFee) bean).getId();
        case 3575610:  // type
          return ((AccruingFee) bean).getType();
        case -1177229905:  // accrual
          return ((AccruingFee) bean).getAccrual();
        case -1540873516:  // paymentDate
          return ((AccruingFee) bean).getPaymentDate();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code AccruingFee}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<AccruingFee> {

    private StandardId id;
    private String type;
    private Accrual accrual;
    private LocalDate paymentDate;

    /**
     * Restricted constructor.
     */
    private Builder() {
      applyDefaults(this);
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(AccruingFee beanToCopy) {
      this.id = beanToCopy.getId();
      this.type = beanToCopy.getType();
      this.accrual = beanToCopy.getAccrual();
      this.paymentDate = beanToCopy.getPaymentDate();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 3355:  // id
          return id;
        case 3575610:  // type
          return type;
        case -1177229905:  // accrual
          return accrual;
        case -1540873516:  // paymentDate
          return paymentDate;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 3355:  // id
          this.id = (StandardId) newValue;
          break;
        case 3575610:  // type
          this.type = (String) newValue;
          break;
        case -1177229905:  // accrual
          this.accrual = (Accrual) newValue;
          break;
        case -1540873516:  // paymentDate
          this.paymentDate = (LocalDate) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public AccruingFee build() {
      return new AccruingFee(
          id,
          type,
          accrual,
          paymentDate);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the internal id of this fee
     * @param id  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder id(StandardId id) {
      JodaBeanUtils.notNull(id, "id");
      this.id = id;
      return this;
    }

    /**
     * Sets the fee type, for now just a free form string.
     * @param type  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder type(String type) {
      JodaBeanUtils.notNull(type, "type");
      this.type = type;
      return this;
    }

    /**
     * Sets the global fee accrual representation.
     * @param accrual  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder accrual(Accrual accrual) {
      JodaBeanUtils.notNull(accrual, "accrual");
      this.accrual = accrual;
      return this;
    }

    /**
     * Sets the payment date of the fee.
     * <p>
     * Interest pays on this date. Usually identical to end date
     * unless end date is a holiday. Payment date is given, not calculated.
     * @param paymentDate  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder paymentDate(LocalDate paymentDate) {
      JodaBeanUtils.notNull(paymentDate, "paymentDate");
      this.paymentDate = paymentDate;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(160);
      buf.append("AccruingFee.Builder{");
      buf.append("id").append('=').append(JodaBeanUtils.toString(id)).append(',').append(' ');
      buf.append("type").append('=').append(JodaBeanUtils.toString(type)).append(',').append(' ');
      buf.append("accrual").append('=').append(JodaBeanUtils.toString(accrual)).append(',').append(' ');
      buf.append("paymentDate").append('=').append(JodaBeanUtils.toString(paymentDate));
      buf.append('}');
      return buf.toString();
    }

  }

  //-------------------------- AUTOGENERATED END --------------------------
}
